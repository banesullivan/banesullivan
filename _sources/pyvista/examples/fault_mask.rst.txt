
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "pyvista/examples/fault_mask.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_pyvista_examples_fault_mask.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_pyvista_examples_fault_mask.py:


Masked Grid for Two Sides of a Fault
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this example, I demonstrate how to use a surface mesh of a fault in the
subsurface to create a data mask on a modeling grid. This is a particularly
useful exercise for scenarios where you may want to perform some sort of
modeling in a different manner due to geological differences on the two sides
of the fault - but still have a single modeling grid.

Let's get to it!

.. GENERATED FROM PYTHON SOURCE LINES 13-18

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 4
    import numpy as np
    import pooch
    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default

    url = "https://raw.githubusercontent.com/pyvista/vtk-data/master/Data/opal_mound_fault.vtk"
    file_path = pooch.retrieve(url=url, known_hash=None)
    fault = pv.read(file_path)
    fault







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table style='width: 100%;'>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>3834</td></tr>
    <tr><td>N Points</td><td>2029</td></tr>
    <tr><td>N Strips</td><td>0</td></tr>
    <tr><td>X Bounds</td><td>3.361e+05, 3.389e+05</td></tr>
    <tr><td>Y Bounds</td><td>4.258e+06, 4.264e+06</td></tr>
    <tr><td>Z Bounds</td><td>-2.606e+03, 2.906e+03</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 26-27

Create the modelling grid if you don't already have one

.. GENERATED FROM PYTHON SOURCE LINES 27-36

.. code-block:: default

    grid = pv.UniformGrid()
    # Bottom south-west corner
    grid.origin = (329700, 4252600, -2700)
    # Cell sizes
    grid.spacing = (500, 500, 500)
    # Number of cells in each direction
    grid.dimensions = (30, 35, 10)
    grid





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/site-packages/pyvista/core/grid.py:873: PyVistaDeprecationWarning: `UniformGrid` is deprecated. Use `ImageData` instead.
      warnings.warn(


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table style='width: 100%;'>
    <tr><th>UniformGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>8874</td></tr>
    <tr><td>N Points</td><td>10500</td></tr>
    <tr><td>X Bounds</td><td>3.297e+05, 3.442e+05</td></tr>
    <tr><td>Y Bounds</td><td>4.253e+06, 4.270e+06</td></tr>
    <tr><td>Z Bounds</td><td>-2.700e+03, 1.800e+03</td></tr>
    <tr><td>Dimensions</td><td>30, 35, 10</td></tr>
    <tr><td>Spacing</td><td>5.000e+02, 5.000e+02, 5.000e+02</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 37-38

Take a quick preview to see where the fault is inside of the grid

.. GENERATED FROM PYTHON SOURCE LINES 38-43

.. code-block:: default

    p = pv.Plotter()
    p.add_mesh(grid, opacity=0.5)
    p.add_mesh(fault, color="orange")
    p.show()




.. image-sg:: /pyvista/examples/images/sphx_glr_fault_mask_001.png
   :alt: fault mask
   :srcset: /pyvista/examples/images/sphx_glr_fault_mask_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-50

You may notice that the modeling grid's extent is far greater than that of
the fault -- not to worry! PyVista's `clip_surface` filter and the utility
I'm going to share below handles this quite well by interpolating the fault's
plane outward.

This is a reusable utility for performing the mask:

.. GENERATED FROM PYTHON SOURCE LINES 50-70

.. code-block:: default

    def mask_mesh_by_surface(mesh, surface):
        grid = mesh.copy()
        # Split the mesh by the fault
        grid["pids"] = np.arange(grid.n_points)
        grid["cids"] = np.arange(grid.n_cells)
        a = grid.clip_surface(surface, invert=False, compute_distance=True)
        b = grid.clip_surface(surface, invert=True, compute_distance=True)
        # Inject the mask
        grid["cell_mask"] = np.zeros(grid.n_cells, dtype=int)
        grid["cell_mask"][a["cids"]] = 1
        grid["cell_mask"][b["cids"]] = 2
        # Use implicit distance to get point mask
        lpids = np.argwhere(grid["implicit_distance"] >= 0)
        gpids = np.argwhere(grid["implicit_distance"] < 0)
        grid["point_mask"] = np.zeros(grid.n_points, dtype=int)
        grid["point_mask"][lpids] = 1
        grid["point_mask"][gpids] = 2
        return grid









.. GENERATED FROM PYTHON SOURCE LINES 71-72

Let's run it and take a look at the result!

.. GENERATED FROM PYTHON SOURCE LINES 72-79

.. code-block:: default

    masked = mask_mesh_by_surface(grid, fault)

    p = pv.Plotter()
    p.add_mesh(fault, color="orange")
    p.add_mesh(masked, scalars="point_mask", opacity=0.5)
    p.show()




.. image-sg:: /pyvista/examples/images/sphx_glr_fault_mask_002.png
   :alt: fault mask
   :srcset: /pyvista/examples/images/sphx_glr_fault_mask_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/site-packages/pyvista/core/grid.py:873: PyVistaDeprecationWarning: `UniformGrid` is deprecated. Use `ImageData` instead.
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 80-82

And here is how you might use that mask to do some sort of fancy modeling.
In my example, I'm going to use a rather sophisticated distance calculation:

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default

    ids = np.argwhere(masked["point_mask"] == 1).ravel()
    pts = grid.points[ids]
    len(pts)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    5659



.. GENERATED FROM PYTHON SOURCE LINES 87-88

Compute distance from TNE corner

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: default

    compute = lambda a, b: np.sqrt(np.sum((b - a) ** 2, axis=1))
    dist = compute(pts, np.repeat([masked.bounds[1::2]], pts.shape[0], axis=0))








.. GENERATED FROM PYTHON SOURCE LINES 92-93

Add those results back to the source grid

.. GENERATED FROM PYTHON SOURCE LINES 93-99

.. code-block:: default

    masked["cool_math"] = np.zeros(grid.n_points)  # Need to preallocate
    masked["cool_math"][ids] = dist

    # Do some different math for the other side
    ...





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Ellipsis



.. GENERATED FROM PYTHON SOURCE LINES 100-101

Display!

.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: default

    masked.plot(scalars="cool_math")




.. image-sg:: /pyvista/examples/images/sphx_glr_fault_mask_003.png
   :alt: fault mask
   :srcset: /pyvista/examples/images/sphx_glr_fault_mask_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 104-105

Visualize one side of the masked grid

.. GENERATED FROM PYTHON SOURCE LINES 105-111

.. code-block:: default

    a = masked.threshold(1.5, scalars="cell_mask", invert=True)

    p = pv.Plotter()
    p.add_mesh(a, scalars="cool_math")
    p.add_mesh(fault, color="orange")
    p.show()



.. image-sg:: /pyvista/examples/images/sphx_glr_fault_mask_004.png
   :alt: fault mask
   :srcset: /pyvista/examples/images/sphx_glr_fault_mask_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.679 seconds)


.. _sphx_glr_download_pyvista_examples_fault_mask.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: fault_mask.py <fault_mask.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: fault_mask.ipynb <fault_mask.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
