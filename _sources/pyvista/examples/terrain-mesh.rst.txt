
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "pyvista/examples/terrain-mesh.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_pyvista_examples_terrain-mesh.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_pyvista_examples_terrain-mesh.py:


Terrain Following Mesh
~~~~~~~~~~~~~~~~~~~~~~

Use a topographic surface to create a 3D terrain-following mesh.

Terrain following meshes are common in the environmental sciences, for instance
in hydrological modelling (see
`Maxwell 2013 <https://www.sciencedirect.com/science/article/abs/pii/S0309170812002564>`_
and
`ParFlow <https://parflow.org>`_).

In this example, we demonstrate a simple way to make a 3D grid/mesh that
follows a given topographic surface. In this example, it is important to note
that the given digital elevation model (DEM) is structured (gridded and not
triangulated): this is common for DEMs.

.. GENERATED FROM PYTHON SOURCE LINES 18-25

.. code-block:: default


    import numpy as np

    # sphinx_gallery_thumbnail_number = 3
    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Download a gridded topography surface (DEM)

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    dem = examples.download_crater_topo()
    dem






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>UniformGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>1677401</td></tr>
    <tr><td>N Points</td><td>1680000</td></tr>
    <tr><td>X Bounds</td><td>1.810e+06, 1.831e+06</td></tr>
    <tr><td>Y Bounds</td><td>5.640e+06, 5.658e+06</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>
    <tr><td>Dimensions</td><td>1400, 1200, 1</td></tr>
    <tr><td>Spacing</td><td>1.500e+01, 1.500e+01, 0.000e+00</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>7.339e+02</td><td>2.787e+03</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 31-35

Now let's subsample and extract an area of interest to make this example
simple (also the DEM we just load is pretty big).
Since the DEM we loaded is a :class:`pyvista.UniformGrid` mesh, we can use
the :func:`pyvista.UniformGridFilters.extract_subset` filter:

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: default

    subset = dem.extract_subset((500, 900, 400, 800, 0, 0), (5, 5, 1))
    subset.plot(cpos="xy")





.. image-sg:: /pyvista/examples/images/sphx_glr_terrain-mesh_001.png
   :alt: terrain mesh
   :srcset: /pyvista/examples/images/sphx_glr_terrain-mesh_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 40-42

Now that we have a region of interest for our terrain following mesh, lets
make a 3D surface of that DEM:

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default

    terrain = subset.warp_by_scalar()
    terrain






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>StructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>6400</td></tr>
    <tr><td>N Points</td><td>6561</td></tr>
    <tr><td>X Bounds</td><td>1.818e+06, 1.824e+06</td></tr>
    <tr><td>Y Bounds</td><td>5.646e+06, 5.652e+06</td></tr>
    <tr><td>Z Bounds</td><td>1.441e+03, 2.769e+03</td></tr>
    <tr><td>Dimensions</td><td>81, 81, 1</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>1.441e+03</td><td>2.769e+03</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default

    terrain.plot()





.. image-sg:: /pyvista/examples/images/sphx_glr_terrain-mesh_002.png
   :alt: terrain mesh
   :srcset: /pyvista/examples/images/sphx_glr_terrain-mesh_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 50-57

And now we have a 3D structured surface of the terrain! We can now extend
that structured surface into a 3D mesh to form a terrain following grid.
To do this, we first our cell spacings in the z-direction (these start
from the terrain surface). Then we repeat the XYZ structured coordinates
of the terrain mesh and decrease each Z level by our Z cell spacing.
Once we have those structured coordinates, we can create a
:class:`pyvista.StructuredGrid`.

.. GENERATED FROM PYTHON SOURCE LINES 57-68

.. code-block:: default


    z_cells = np.array([25] * 5 + [35] * 3 + [50] * 2 + [75, 100])

    xx = np.repeat(terrain.x, len(z_cells), axis=-1)
    yy = np.repeat(terrain.y, len(z_cells), axis=-1)
    zz = np.repeat(terrain.z, len(z_cells), axis=-1) - np.cumsum(z_cells).reshape((1, 1, -1))

    mesh = pv.StructuredGrid(xx, yy, zz)
    mesh["Elevation"] = zz.ravel(order="F")
    mesh






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>StructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>70400</td></tr>
    <tr><td>N Points</td><td>78732</td></tr>
    <tr><td>X Bounds</td><td>1.818e+06, 1.824e+06</td></tr>
    <tr><td>Y Bounds</td><td>5.646e+06, 5.652e+06</td></tr>
    <tr><td>Z Bounds</td><td>9.364e+02, 2.744e+03</td></tr>
    <tr><td>Dimensions</td><td>81, 81, 12</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>Elevation</b></td><td>Points</td><td>float64</td><td>1</td><td>9.364e+02</td><td>2.744e+03</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 69-76

.. code-block:: default

    cpos = [
        (1826736.796308761, 5655837.275274233, 4676.8405505181745),
        (1821066.1790519988, 5649248.765538796, 943.0995128226014),
        (-0.2797856225380979, -0.27966946337594883, 0.9184252809434081),
    ]

    mesh.plot(show_edges=True, lighting=False, cpos=cpos)



.. image-sg:: /pyvista/examples/images/sphx_glr_terrain-mesh_003.png
   :alt: terrain mesh
   :srcset: /pyvista/examples/images/sphx_glr_terrain-mesh_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.209 seconds)


.. _sphx_glr_download_pyvista_examples_terrain-mesh.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: terrain-mesh.py <terrain-mesh.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: terrain-mesh.ipynb <terrain-mesh.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
