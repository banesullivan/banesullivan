
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "pyvista/examples/create-surface-draped.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_pyvista_examples_create-surface-draped.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_pyvista_examples_create-surface-draped.py:


Drape 2D Surface From Line
~~~~~~~~~~~~~~~~~~~~~~~~~~

Drape a surface (2D array) from a line in 3D space.

This is a common task to create a 2.5D image/sectional mesh of data like GPR
or airborne EM profiles (geophysics applications). This example provides a look
into how to create a 2.5D sectional mesh from typical data in those use cases.

For this example, we have an instrument path on the ground surface (the line)
and a 2D array of the collected image under that line.

Originally posted in `this support issue <https://github.com/pyvista/pyvista-support/issues/135>`_.

Suppose you have some GPR data (or anything that produces a line of data with
values at depth). With these data, you'll have a 2D image/array of your data
values and 3D coordinates of where that line/profile is in 3D space (often
where you collected the data on the surface of topography). Attached below are
some example data for this: 1) XYZ coordinates of a GPR path and 2) a 2D array
of data values produced from the GPR.

The data here are wacky (it's difficult to get shareable data of decent
quality), so ignore them but pay attention to the structure. The coordinates we
have are technically shifted up and we have some NaN filler above the surface
- its weird and just ignore it. You'll typically have a more uniform looking
profile in 2D with the coordinates associated to the top of each column in your
2D array.

.. GENERATED FROM PYTHON SOURCE LINES 30-43

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    # sphinx_gallery_thumbnail_number = 3
    import pyvista as pv
    from pyvista import examples

    # Extract the data archive and load these files
    # 2D array of XYZ coordinates
    path = examples.download_gpr_path().points
    # 2D array of the data values from the imaging equipment
    data = examples.download_gpr_data_array()








.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: default

    plt.figure(figsize=(15, 3))
    plt.pcolormesh(data, cmap="seismic", clim=[-1, 1])
    plt.gca().invert_yaxis()




.. image-sg:: /pyvista/examples/images/sphx_glr_create-surface-draped_001.png
   :alt: create surface draped
   :srcset: /pyvista/examples/images/sphx_glr_create-surface-draped_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 49-52

View the the path of the GPR profile from a top-down perspective.
Since we have the full coordinates (XY and Z), we can create a structured
mesh "draping" down from those coordinates to hold the GPR image data.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: default

    plt.scatter(path[:, 1], path[:, 0])
    plt.axis("image")
    plt.xlabel("Northing")
    plt.ylabel("Easting")




.. image-sg:: /pyvista/examples/images/sphx_glr_create-surface-draped_002.png
   :alt: create surface draped
   :srcset: /pyvista/examples/images/sphx_glr_create-surface-draped_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(38.347222222222214, 0.5, 'Easting')



.. GENERATED FROM PYTHON SOURCE LINES 58-75

.. code-block:: default


    assert len(path) in data.shape, "Make sure coordinates are present for every trace."
    # If not, you'll need to interpolate the path!

    # Grab the number of samples (in Z dir) and number of traces/soundings
    nsamples, ntraces = data.shape  # Might be opposite for your data, pay attention here

    # Define the Z spacing of your 2D section
    z_spacing = 0.12

    # Create structured points draping down from the path
    points = np.repeat(path, nsamples, axis=0)
    # repeat the Z locations across
    tp = np.arange(0, z_spacing * nsamples, z_spacing)
    tp = path[:, 2][:, None] - tp
    points[:, -1] = tp.ravel()








.. GENERATED FROM PYTHON SOURCE LINES 76-77

Make a StructuredGrid from the structured points

.. GENERATED FROM PYTHON SOURCE LINES 77-84

.. code-block:: default

    grid = pv.StructuredGrid()
    grid.points = points
    grid.dimensions = nsamples, ntraces, 1

    # Add the data array - note the ordering!
    grid["values"] = data.ravel(order="F")








.. GENERATED FROM PYTHON SOURCE LINES 85-87

And now we can plot it! or process or do anything, because it is a PyVista
mesh and the possibilities are endless with PyVista

.. GENERATED FROM PYTHON SOURCE LINES 87-98

.. code-block:: default


    cpos = [
        (1217002.366883762, 345363.80666238244, 3816.828857791056),
        (1216322.4753436751, 344033.0310674846, 3331.052985309526),
        (-0.17716571330686096, -0.25634368781817973, 0.9502106207279767),
    ]

    p = pv.Plotter()
    p.add_mesh(grid, cmap="seismic", clim=[-1, 1])
    p.add_mesh(pv.PolyData(path), color="orange")
    p.show(cpos=cpos)



.. image-sg:: /pyvista/examples/images/sphx_glr_create-surface-draped_003.png
   :alt: create surface draped
   :srcset: /pyvista/examples/images/sphx_glr_create-surface-draped_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.588 seconds)


.. _sphx_glr_download_pyvista_examples_create-surface-draped.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: create-surface-draped.py <create-surface-draped.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: create-surface-draped.ipynb <create-surface-draped.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
