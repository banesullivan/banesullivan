
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "pyvista/examples/wolf-creek.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_pyvista_examples_wolf-creek.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_pyvista_examples_wolf-creek.py:


Load OMF Project
~~~~~~~~~~~~~~~~

Load and visualize an OMF project file

Originally from: https://opengeovis.github.io/omfvista/examples/load-project.html

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default

    import omfvista

    # sphinx_gallery_thumbnail_number = 3
    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Load the project into an :class:`pyvista.MultiBlock` dataset

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: default


    path, _ = examples.downloads._download_file("test_file.omf")

    project = omfvista.load_project(path)
    print(project)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MultiBlock (0x7f9094dcf160)
      N Blocks:     9
      X Bounds:     443941.105, 447059.611
      Y Bounds:     491941.536, 495059.859
      Z Bounds:     2330.000, 3555.942





.. GENERATED FROM PYTHON SOURCE LINES 24-27

Once the data is loaded as a :class:`pyvista.MultiBlock` dataset from
``omfvista``, then that object can be directly used for interactive 3D
visualization from ``pyvista``:

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default


    project.plot()





.. image-sg:: /pyvista/examples/images/sphx_glr_wolf-creek_001.png
   :alt: wolf creek
   :srcset: /pyvista/examples/images/sphx_glr_wolf-creek_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 32-35

Or an interactive scene can be created and manipulated to create a compelling
figure directly in a Jupyter notebook. First, grab the elements from the
project:

.. GENERATED FROM PYTHON SOURCE LINES 35-42

.. code-block:: default


    # Grab a few elements of interest and plot em up!
    vol = project["Block Model"]
    assay = project["wolfpass_WP_assay"]
    topo = project["Topography"]
    dacite = project["Dacite"]








.. GENERATED FROM PYTHON SOURCE LINES 43-56

.. code-block:: default


    assay.set_active_scalars("DENSITY")

    p = pv.Plotter()
    p.add_mesh(assay.tube(radius=3))
    p.add_mesh(topo, opacity=0.5)
    p.camera_position = [
        (445542.1943310096, 491993.83439313783, 2319.4833541935445),
        (445279.0538059701, 493496.6896061105, 2751.562316285356),
        (-0.03677380086746433, -0.2820672798388477, 0.9586895937758338),
    ]
    p.show()




.. image-sg:: /pyvista/examples/images/sphx_glr_wolf-creek_002.png
   :alt: wolf creek
   :srcset: /pyvista/examples/images/sphx_glr_wolf-creek_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 57-58

Then apply a filtering tool from ``pyvista`` to the volumetric data:

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default


    # Threshold the volumetric data
    thresh_vol = vol.threshold([1.09, 4.20])
    print(thresh_vol)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    UnstructuredGrid (0x7f90df159e80)
      N Cells:      92525
      N Points:     107807
      X Bounds:     4.447e+05, 4.457e+05
      Y Bounds:     4.929e+05, 4.942e+05
      Z Bounds:     2.330e+03, 3.110e+03
      N Arrays:     1





.. GENERATED FROM PYTHON SOURCE LINES 64-65

Then you can put it all in one environment!

.. GENERATED FROM PYTHON SOURCE LINES 65-89

.. code-block:: default


    # Create a plotting window
    p = pv.Plotter()
    # Add the bounds axis
    p.show_grid()
    p.add_bounding_box()

    # Add our datasets
    p.add_mesh(topo, opacity=0.5)
    p.add_mesh(
        dacite,
        color="orange",
        opacity=0.6,
    )
    p.add_mesh(thresh_vol, cmap="coolwarm", clim=vol.get_data_range())

    # Add the assay logs: use a tube filter that various the radius by an attribute
    p.add_mesh(assay.tube(radius=3), cmap="viridis")
    p.camera_position = [
        (446842.54037898243, 492089.0563631193, 3229.5037597889404),
        (445265.2503466077, 493747.3230470255, 2799.8853219866005),
        (-0.10728419235836695, 0.1524885965210015, 0.9824649255831316),
    ]
    p.show()



.. image-sg:: /pyvista/examples/images/sphx_glr_wolf-creek_003.png
   :alt: wolf creek
   :srcset: /pyvista/examples/images/sphx_glr_wolf-creek_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.593 seconds)


.. _sphx_glr_download_pyvista_examples_wolf-creek.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: wolf-creek.py <wolf-creek.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: wolf-creek.ipynb <wolf-creek.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
