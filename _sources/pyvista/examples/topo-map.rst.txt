
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "pyvista/examples/topo-map.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_pyvista_examples_topo-map.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_pyvista_examples_topo-map.py:


Topographic Map
~~~~~~~~~~~~~~~

Plot a map from a GeoTIFF on top of a topography mesh.

.. GENERATED FROM PYTHON SOURCE LINES 7-21

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 4

    import pyvista as pv
    from pyvista import examples

    # Load the elevation data as a surface
    elevation = examples.download_crater_topo().warp_by_scalar()
    # Load the topographic map from a GeoTiff
    topo_map = examples.download_crater_imagery()

    elevation

    import matplotlib as mpl








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Let's inspect the imagery that we just loaded

.. GENERATED FROM PYTHON SOURCE LINES 23-29

.. code-block:: default

    import matplotlib.pyplot as plt

    mpl.rcParams["figure.dpi"] = 500

    plt.imshow(topo_map.to_array())




.. image-sg:: /pyvista/examples/images/sphx_glr_topo-map_001.png
   :alt: topo map
   :srcset: /pyvista/examples/images/sphx_glr_topo-map_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f141af7fb20>



.. GENERATED FROM PYTHON SOURCE LINES 30-34

Once you have a topography mesh loaded as a surface mesh
(we use a :class:`pyvista.StructuredGrid` here) and an image loaded as a
:class:`pyvista.Texture` object using the :func:`pyvista.read_texture`
method, then you can map that imagery to the surface mesh as follows:

.. GENERATED FROM PYTHON SOURCE LINES 34-42

.. code-block:: default


    # Bounds of the aerial imagery - given to us
    bounds = (1818000, 1824500, 5645000, 5652500, 0, 3000)
    # Clip the elevation dataset to the map's extent
    local = elevation.clip_box(bounds, invert=False)
    # Apply texturing coordinates to associate the image to the surface
    local.texture_map_to_plane(use_bounds=True, inplace=True)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>436733</td></tr>
    <tr><td>N Points</td><td>222110</td></tr>
    <tr><td>X Bounds</td><td>1.818e+06, 1.825e+06</td></tr>
    <tr><td>Y Bounds</td><td>5.645e+06, 5.653e+06</td></tr>
    <tr><td>Z Bounds</td><td>1.381e+03, 2.787e+03</td></tr>
    <tr><td>N Arrays</td><td>2</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>1.381e+03</td><td>2.787e+03</td></tr>
    <tr><td>Texture Coordinates</td><td>Points</td><td>float32</td><td>2</td><td>0.000e+00</td><td>1.000e+00</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now display it! Note that the imagery is aligned as we expect.

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: default

    local.plot(texture=topo_map, cpos="xy")




.. image-sg:: /pyvista/examples/images/sphx_glr_topo-map_002.png
   :alt: topo map
   :srcset: /pyvista/examples/images/sphx_glr_topo-map_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 47-48

And here is a 3D perspective!

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    local.plot(texture=topo_map)




.. image-sg:: /pyvista/examples/images/sphx_glr_topo-map_003.png
   :alt: topo map
   :srcset: /pyvista/examples/images/sphx_glr_topo-map_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 51-53

We could also display the entire region by extracting the surrounding region
and plotting the texture mapped local topography and the outside area

.. GENERATED FROM PYTHON SOURCE LINES 53-68

.. code-block:: default


    # Extract surrounding region from elevation data
    surrounding = elevation.clip_box(bounds, invert=True)

    # Display with a shading technique
    p = pv.Plotter()
    p.add_mesh(local, texture=topo_map)
    p.add_mesh(surrounding, color="white")
    p.enable_eye_dome_lighting()
    p.camera_position = [
        (1831100.0, 5642142.0, 8168.0),
        (1820841.0, 5648745.0, 1104.0),
        (-0.435, 0.248, 0.865),
    ]
    p.show()



.. image-sg:: /pyvista/examples/images/sphx_glr_topo-map_004.png
   :alt: topo map
   :srcset: /pyvista/examples/images/sphx_glr_topo-map_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.328 seconds)


.. _sphx_glr_download_pyvista_examples_topo-map.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: topo-map.py <topo-map.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: topo-map.ipynb <topo-map.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
