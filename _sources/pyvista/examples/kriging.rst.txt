
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "pyvista/examples/kriging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_pyvista_examples_kriging.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_pyvista_examples_kriging.py:


Kriging with GSTools
~~~~~~~~~~~~~~~~~~~~

This example utilizes data available from the `FORGE geothermal reserach site <https://utahforge.com>`_'s `2019 Geothermal Design Challenge <https://utahforge.com/studentcomp/>`_. In this example, the data is archived in the `Open Mining Format v1 (OMF) <https://github.com/gmggroup/omf>`_ specification and the `omfvista <https://opengeovis.github.io/omfvista/>`_ software is leverage to load those data into a PyVista ``MultiBlock`` data structure.

The goal of this workflow is to create a 3D temperature model by kriging the *Observed Temperature* data (sparse observational data).
The open-source, Python software `GSTools <https://geostat-framework.github.io/>`_ is used to perform variogram analysis and kriging of the temperature data onto a PyVista mesh to create the 3D model.

.. GENERATED FROM PYTHON SOURCE LINES 10-21

.. code-block:: default

    import PVGeo
    from gstools import Exponential, krige, vario_estimate_unstructured
    from gstools.covmodel.plot import plot_variogram
    import matplotlib.pyplot as plt
    import numpy as np
    import omfvista

    # sphinx_gallery_thumbnail_number = 4
    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 22-26

Load the Data
+++++++++++++

For this project, we have two data archives in the `Open Mining Format (OMF) <https://github.com/gmggroup/omf>`_ specification and we will use one of PyVista's companion projects, `omfvista <https://opengeovis.github.io/omfvista/>`_ to load those data archives into PyVista a ``MultiBlock`` dataset.

.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: default


    url = "https://dl.dropbox.com/s/3cuxvurj8zubchb/FORGE.omf?dl=0"
    path, _ = examples.downloads._retrieve_file(url, "FORGE.omf")

    project = omfvista.load_project(path)
    project






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Information</th><th>Blocks</th></tr><tr><td>
    <table>
    <tr><th>MultiBlock</th><th>Values</th></tr>
    <tr><td>N Blocks</td><td>7</td></tr>
    <tr><td>X Bounds</td><td>329924.988, 344152.930</td></tr>
    <tr><td>Y Bounds</td><td>4252833.482, 4270951.098</td></tr>
    <tr><td>Z Bounds</td><td>-2606.000, 2906.000</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Index</th><th>Name</th><th>Type</th></tr>
    <tr><th>0</th><th>Terrain</th><th>PolyData</th></tr>
    <tr><th>1</th><th>Opal Mound Fault</th><th>PolyData</th></tr>
    <tr><th>2</th><th>Negro Mag Fault</th><th>PolyData</th></tr>
    <tr><th>3</th><th>Top of Basement</th><th>PolyData</th></tr>
    <tr><th>4</th><th>Site Boundary</th><th>PolyData</th></tr>
    <tr><th>5</th><th>Observed Temperature</th><th>PolyData</th></tr>
    <tr><th>6</th><th>Observed Gravity</th><th>PolyData</th></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 34-38

Initial Inspection
++++++++++++++++++

Now we can go ahead and create an integrated visualization of all of the data available to us.

.. GENERATED FROM PYTHON SOURCE LINES 38-60

.. code-block:: default


    p = pv.Plotter(window_size=np.array([1024, 768]) * 2)
    p.add_mesh(project["Site Boundary"], color="yellow", render_lines_as_tubes=True, line_width=10)
    p.add_mesh(project["Terrain"], texture="geo_aer", opacity=0.7, lighting=False)
    p.add_mesh(project["Opal Mound Fault"], color="brown", opacity=0.7)
    p.add_mesh(project["Negro Mag Fault"], color="lightblue", opacity=0.7)
    p.add_mesh(
        project["Observed Temperature"],
        cmap="coolwarm",
        clim=[10, 270],
        point_size=15,
        render_points_as_spheres=True,
    )

    p.camera_position = [
        (315661.9406719345, 4234675.528454831, 15167.291249498076),
        (337498.00521202036, 4260818.504034578, -1261.5688408692681),
        (0.2708862567924439, 0.3397398234107863, 0.9006650255615491),
    ]
    p.show()





.. image-sg:: /pyvista/examples/images/sphx_glr_kriging_001.png
   :alt: kriging
   :srcset: /pyvista/examples/images/sphx_glr_kriging_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-65

Kriging
+++++++

Now we will use an external library, [`gstools`](https://geostat-framework.github.io), to krige the temperature probe data into a 3D temperature model of the subsurface.

.. GENERATED FROM PYTHON SOURCE LINES 67-71

Choosing a Model Space
^^^^^^^^^^^^^^^^^^^^^^

We start out by creating the 3D model space as a PyVista `UniformGrid` that encompasses the project region. The following were chosen manually:

.. GENERATED FROM PYTHON SOURCE LINES 71-81

.. code-block:: default


    # Create the kriging grid
    grid = pv.UniformGrid()
    # Bottom south-west corner
    grid.origin = (329700, 4252600, -2700)
    # Cell sizes
    grid.spacing = (250, 250, 50)
    # Number of cells in each direction
    grid.dimensions = (60, 75, 100)








.. GENERATED FROM PYTHON SOURCE LINES 82-83

Visually inspect the kriging grid in relation to data

.. GENERATED FROM PYTHON SOURCE LINES 83-100

.. code-block:: default

    p = pv.Plotter(window_size=np.array([1024, 768]) * 2)
    p.add_mesh(grid, opacity=0.5, color=True)
    p.add_mesh(project["Terrain"], texture="geo_aer", opacity=0.75)
    p.add_mesh(
        project["Observed Temperature"],
        cmap="coolwarm",
        point_size=15,
        render_points_as_spheres=True,
        scalar_bar_args={"title": "Temperature (C)"},
    )
    p.camera_position = [
        (303509.4197523619, 4279629.689766085, 8053.049483835099),
        (336316.405356571, 4261479.748583805, -1756.358124546427),
        (0.22299463811939535, -0.11978828465250713, 0.9674317331109259),
    ]
    p.show()




.. image-sg:: /pyvista/examples/images/sphx_glr_kriging_002.png
   :alt: kriging
   :srcset: /pyvista/examples/images/sphx_glr_kriging_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 101-105

Variogram Analysis
^^^^^^^^^^^^^^^^^^

Next, we need to compute a variogram for the temperature probe data and fit that variogram to an exponential model

.. GENERATED FROM PYTHON SOURCE LINES 105-124

.. code-block:: default


    bins = np.linspace(0, 12300, 1000)
    bin_center, gamma = vario_estimate_unstructured(
        project["Observed Temperature"].points.T,
        project["Observed Temperature"]["temperature (C)"],
        bins,
    )


    fit_model = Exponential(dim=3)
    fit_model.fit_variogram(bin_center, gamma, nugget=False)

    plt.figure(figsize=(10, 5))
    plt.plot(bin_center, gamma)
    plot_variogram(fit_model, x_max=bins[-1], ax=plt.gca())
    plt.xlabel("Lag Distance")
    plt.ylabel("Variogram")
    plt.show()




.. image-sg:: /pyvista/examples/images/sphx_glr_kriging_003.png
   :alt: kriging
   :srcset: /pyvista/examples/images/sphx_glr_kriging_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 125-128

Performing the Kriging
^^^^^^^^^^^^^^^^^^^^^^
Then we pass the fitted exponential model when instantiating the kriging operator from GSTools.

.. GENERATED FROM PYTHON SOURCE LINES 128-136

.. code-block:: default


    # Create the kriging model
    krig = krige.Ordinary(
        fit_model,
        project["Observed Temperature"].points.T,
        project["Observed Temperature"]["temperature (C)"],
    )








.. GENERATED FROM PYTHON SOURCE LINES 137-138

After instantiating the kriging operator, we can have it operate on the nodes of our 3D grid that we created earlier and collect the results back onto the grid.

.. GENERATED FROM PYTHON SOURCE LINES 138-143

.. code-block:: default

    krig.mesh(
        grid,
        name="temperature (C)",
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (array([116.47008157, 117.61158345, 118.68310243, ...,  38.15069459,
            39.5596414 ,  40.96307076]), array([8098.01350521, 7671.63868665, 7234.00736005, ..., 8755.16955356,
           9108.41407123, 9444.96476497]))



.. GENERATED FROM PYTHON SOURCE LINES 144-145

And now the `grid` model has the temperature scalar field and kriging variance as data arrays.

.. GENERATED FROM PYTHON SOURCE LINES 145-150

.. code-block:: default


    project["Kriged Temperature Model"] = grid
    project







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Information</th><th>Blocks</th></tr><tr><td>
    <table>
    <tr><th>MultiBlock</th><th>Values</th></tr>
    <tr><td>N Blocks</td><td>8</td></tr>
    <tr><td>X Bounds</td><td>329700.000, 344450.000</td></tr>
    <tr><td>Y Bounds</td><td>4252600.000, 4271100.000</td></tr>
    <tr><td>Z Bounds</td><td>-2700.000, 2906.000</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Index</th><th>Name</th><th>Type</th></tr>
    <tr><th>0</th><th>Terrain</th><th>PolyData</th></tr>
    <tr><th>1</th><th>Opal Mound Fault</th><th>PolyData</th></tr>
    <tr><th>2</th><th>Negro Mag Fault</th><th>PolyData</th></tr>
    <tr><th>3</th><th>Top of Basement</th><th>PolyData</th></tr>
    <tr><th>4</th><th>Site Boundary</th><th>PolyData</th></tr>
    <tr><th>5</th><th>Observed Temperature</th><th>PolyData</th></tr>
    <tr><th>6</th><th>Observed Gravity</th><th>PolyData</th></tr>
    <tr><th>7</th><th>Kriged Temperature Model</th><th>UniformGrid</th></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-155

Post-Processing
+++++++++++++++

We can use a filter from PVGeo to extract the region of the temperature model that is beneath the topography surface as the kriging did not account for the surface boundary.

.. GENERATED FROM PYTHON SOURCE LINES 155-161

.. code-block:: default


    # Instantiate the algorithm
    extractor = PVGeo.grids.ExtractTopography(tolerance=10, remove=True)
    # Apply the algorithm to the PyVista grid using the topography surface
    subsurface = extractor.apply(grid, project["Terrain"])








.. GENERATED FROM PYTHON SOURCE LINES 162-164

Resulting Visualization
+++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 164-209

.. code-block:: default


    # Create the main figure
    def add_contents(p):
        """A helper to add data to scenes."""
        p.add_mesh(
            project["Site Boundary"].tube(50),
            color="yellow",
        )
        p.add_mesh(project["Terrain"], texture="geo_aer", opacity=0.7, lighting=False)

        p.add_mesh(project["Opal Mound Fault"], color="brown", opacity=0.75)
        p.add_mesh(project["Negro Mag Fault"], color="lightblue", opacity=0.75)

        p.add_mesh(
            subsurface.ctp().contour([175, 225], scalars="temperature (C)"),
            name="the model",
            scalars="temperature (C)",
            cmap="coolwarm",
            clim=[10, 270],
            opacity=0.9,
            scalar_bar_args={"title": "Temperature (C)"},
        )
        p.add_mesh(
            project["Observed Temperature"],
            cmap="coolwarm",
            clim=[10, 270],
            render_points_as_spheres=True,
            point_size=10,
            scalar_bar_args={"title": "Temperature (C)"},
        )

        return


    p = pv.Plotter()

    add_contents(p)

    p.camera_position = [
        (319663.46494887985, 4294870.4704494225, -8787.973684799075),
        (336926.4650625, 4261892.29012, 103.0),
        (-0.09983848586767283, 0.20995262898057362, 0.9726007250273854),
    ]

    p.show()



.. image-sg:: /pyvista/examples/images/sphx_glr_kriging_004.png
   :alt: kriging
   :srcset: /pyvista/examples/images/sphx_glr_kriging_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  48.193 seconds)


.. _sphx_glr_download_pyvista_examples_kriging.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: kriging.py <kriging.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: kriging.ipynb <kriging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
